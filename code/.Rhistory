colour = " ",
linetype = " ") +
theme_minimal() +
theme(
legend.position = "bottom",
legend.box = "vertical",
legend.spacing = unit(0, "lines")
) +
guides(
colour = guide_legend(order = 1),
linetype = guide_legend(order = 2)
)
# ggsave("trend.png", dpi = 300, width = 8.5, height = 6, units = "in")
subDataTrends <- subData %>%
group_by(TYPE, YEAR) %>%
summarise(TOTAL_VOTOS = sum(TOTAL_VOTOS, na.rm = TRUE),
ELECTORES_HAB = sum(ELECTORES_HABILES, na.rm = TRUE),
V_NULOS = sum(VOTOS_NULOS, na.rm = TRUE),
V_BLANCOS = sum(VOTOS_BLANCOS, na.rm = TRUE))
subDataTrends$AUSENTISMO = 1 - round(subDataTrends$TOTAL_VOTOS / subDataTrends$ELECTORES_HAB,2)
subDataTrends$FreqBLANCOS = round(subDataTrends$V_BLANCOS / subDataTrends$TOTAL_VOTOS,2)
subDataTrends$FreqNULOS = round(subDataTrends$V_NULOS / subDataTrends$TOTAL_VOTOS, 2)
subDataTrends$FreqINVALIDOS = subDataTrends$FreqBLANCOS + subDataTrends$FreqNULOS
subDataTrends <- subDataTrends %>%
select(1, 2, 8:9) %>%
setNames(c("TYPE", "YEAR", "Votos Blancos", "Votos Nulos")) %>%
pivot_longer(cols = c("Votos Blancos", "Votos Nulos"),
names_to = "vote_type",
values_to = "percentage")
subDataTrends <- subDataTrends %>%
mutate(TYPE = case_when(
TYPE == "REGIONALES" ~ "Gobierno Regional",
TYPE == "PROVINCIALES" ~ "Alcaldía Provincial",
TYPE == "DISTRITALES" ~ "Alcaldía Distrital",
TRUE ~ TYPE  # keep other values as they are
))
subDataTrends$YEAR = as.character(subDataTrends$YEAR)
subDataTrends1 <- subDataTrends[subDataTrends$TYPE == "Gobierno Regional",]
ggplot(subDataTrends1, aes(x = YEAR, y = percentage,
colour = vote_type,
linetype = TYPE,
group = interaction(TYPE, vote_type))) +
geom_line(size = 1) +
geom_point(size = 1) +
geom_text(aes(label = percentage),
vjust = -0.8, size = 3, show.legend = FALSE) +
labs(title = "Blank and Votes by Election Type",
x = " ",
y = " ",
colour = " ",
linetype = " ") +
theme_minimal() +
theme(
legend.position = "bottom",
legend.box = "vertical",
legend.spacing = unit(0, "lines")
) +
guides(
colour = guide_legend(order = 1),
linetype = guide_legend(order = 2)
)
# ggsave("trendGR.jpeg", dpi = 300, width = 8.5, height = 6, units = "in")
subDataTrends <- subDataTrends[!subDataTrends$TYPE == "Gobierno Regional",]
ggplot(subDataTrends, aes(x = YEAR, y = percentage,
colour = vote_type,
linetype = TYPE,
group = interaction(TYPE, vote_type))) +
geom_line(size = 1) +
geom_point(size = 1) +
geom_text(aes(label = percentage),
vjust = -0.8, size = 3, show.legend = FALSE) +
labs(title = "Blank and Votes by Election Type",
x = " ",
y = " ",
colour = " ",
linetype = " ") +
theme_minimal() +
theme(
legend.position = "bottom",
legend.box = "vertical",
legend.spacing = unit(0, "lines")
) +
guides(
colour = guide_legend(order = 1),
linetype = guide_legend(order = 2)
)
# ggsave("trendAL.jpeg", dpi = 300, width = 8.5, height = 6, units = "in")
g1cb <- dataCongress %>% select(1,10,13) %>%
mutate(YEAR = as.character(YEAR)) %>%
pivot_wider(
names_from = YEAR,
values_from = FreqBLANCOS,
names_prefix = "blank_"
) %>% mutate(UBIGEO = ifelse(nchar(UBIGEO) == 5, str_pad(UBIGEO, 6, pad = "0"), UBIGEO))
# Optionally remove UBIGEO for plotting
g1cb_plot <- g1cb %>%
slice(1:1874) %>%
tibble::column_to_rownames("UBIGEO") %>%  # Set UBIGEO as row names
filter(if_all(everything(), ~ is.finite(.))) %>%
select(5, 4, 3, 2, 1)
# Custom function to show correlation coefficients
my_cor <- function(data, mapping, method = "pearson", digits = 2, ...) {
x <- eval_data_col(data, mapping$x)
y <- eval_data_col(data, mapping$y)
corr <- cor(x, y, method = method, use = "complete.obs")
ggally_text(
label = format(corr, digits = digits),
mapping = aes(),
...
) +
theme_void()
}
# Create the plot
ggpairs(
data = g1cb_plot,
lower = list(continuous = wrap("points", alpha = 0.5, size = 1)),
diag = list(continuous = wrap("barDiag", bins = 20)),
upper = list(continuous = wrap(my_cor, method = "pearson"))
)
# ggsave("congress_blank.jpeg", dpi = 300, width = 8.5, height = 7, units = "in")
# Step 2: Compute distance matrix (Euclidean by default)
dist_matrix <- dist(g1cb_plot, method = "euclidean")
# Step 3: Hierarchical clustering (Ward's method = minimizes within-cluster variance)
hc <- hclust(dist_matrix, method = "ward.D2")
# PCA on the scaled data
pca_result <- prcomp(g1cb_plot)
# Visualise with PCA and colour by hierarchical cluster
fviz_pca_ind(pca_result,
geom.ind = "point",
col.ind = as.factor(cutree(hc, k = 3)),  # Cluster membership
palette = "jco",
addEllipses = TRUE,
legend.title = "Cluster",
title = "District Clusters Based on Blank Votes (PCA)")
# Step 1: Cut the dendrogram to get cluster membership (3 clusters in this example)
cluster_membership <- cutree(hc, k = 3)
# Step 2: Add cluster assignment as a new column in the original dataset
clust_blank_congress <- g1cb_plot
clust_blank_congress $cluster <- factor(cluster_membership)
# Ubi
clust_blank_congress$UBIGEO <- row.names(clust_blank_congress)
set.seed(123)
kmeans_result <- kmeans(g1cb_plot, centers = 3, nstart = 25)
fviz_cluster(kmeans_result, data = g1cb_plot,
main = "K-means Clustering of Districts")
g1cn <- dataCongress %>% select(1,11,13) %>%
mutate(YEAR = as.character(YEAR)) %>%
pivot_wider(
names_from = YEAR,
values_from = FreqNULOS,
names_prefix = "null_"
) %>% mutate(UBIGEO = ifelse(nchar(UBIGEO) == 5, str_pad(UBIGEO, 6, pad = "0"), UBIGEO))
# Optionally remove UBIGEO for plotting
g1cn_plot <- g1cn %>% select(-UBIGEO) %>% slice(1:1874) %>%
filter(if_all(everything(), ~ is.finite(.))) %>% select(5,4,3,2,1)
# Custom function to show correlation coefficients
my_cor <- function(data, mapping, method = "pearson", digits = 2, ...) {
x <- eval_data_col(data, mapping$x)
y <- eval_data_col(data, mapping$y)
corr <- cor(x, y, method = method, use = "complete.obs")
ggally_text(
label = format(corr, digits = digits),
mapping = aes(),
...
) +
theme_void()
}
# Create the plot
ggpairs(
data = g1cn_plot,
lower = list(continuous = wrap("points", alpha = 0.5, size = 1)),
diag = list(continuous = wrap("barDiag", bins = 20)),
upper = list(continuous = wrap(my_cor, method = "pearson"))
)
# ggsave("congress_null.jpeg", dpi = 300, width = 8.5, height = 7, units = "in")
# Step 2: Compute distance matrix (Euclidean by default)
dist_matrix <- dist(g1cn_plot, method = "euclidean")
# Step 3: Hierarchical clustering (Ward's method = minimizes within-cluster variance)
hc <- hclust(dist_matrix, method = "ward.D2")
# PCA on the scaled data
pca_result <- prcomp(g1cn_plot)
# Visualise with PCA and colour by hierarchical cluster
fviz_pca_ind(pca_result,
geom.ind = "point",
col.ind = as.factor(cutree(hc, k = 3)),  # Cluster membership
palette = "jco",
addEllipses = TRUE,
legend.title = "Cluster",
title = "District Clusters Based on Null Votes (PCA)")
set.seed(123)
kmeans_result <- kmeans(g1cn_plot, centers = 3, nstart = 25)
fviz_cluster(kmeans_result, data = g1cn_plot,
main = "K-means Clustering of Districts")
# Filtering data
c2021 <- dataCongress[dataCongress$YEAR == "2021",]
c2021 <-  c2021 %>%
mutate(UBIGEO = ifelse(nchar(UBIGEO) == 5, str_pad(UBIGEO, 6, pad = "0"), UBIGEO))
# Ubigeo
ubi <- ubi[,c(2,3)]
ubi <- ubi %>%
mutate(ubigeo_reniec = ifelse(nchar(ubigeo_reniec) == 5, str_pad(ubigeo_reniec, 6, pad = "0"), ubigeo_reniec)) %>%
mutate(ubigeo_inei = ifelse(nchar(ubigeo_inei) == 5, str_pad(ubigeo_inei, 6, pad = "0"), ubigeo_inei))
#Merge
c2021 = merge(c2021, ubi, by.x = "UBIGEO", by.y = "ubigeo_reniec", all.x = TRUE)
c2021 = merge(c2021, clust_blank_congress, by = "UBIGEO", all.x = TRUE)
c2021 %>%
group_by(cluster) %>%
summarise(avg_blancos = mean(FreqBLANCOS, na.rm = TRUE))
map <- dist21 %>% # Merge with shapefile
left_join(c2021, by = c("UBIGEO" = "ubigeo_inei"))
## Spatial Patterns of Blank Votes
blank_congress_map21 <- ggplot(map) +
geom_sf(aes(fill = FreqBLANCOS), colour = NA) +  # no lines between polygons
scale_fill_viridis_c(
option = "A",  # high-contrast palette
name = "Blank Votes (0-1)"
) +
labs(
title = "2021 Peruvian National Elections (Congress)",
subtitle = "Blank Votes (%)",
caption = "Source: ONPE"
) +
theme_minimal() +
theme(
legend.position = "right",
panel.grid = element_blank(),   # remove grid
axis.text = element_blank(),    # remove axis labels
axis.title = element_blank()    # remove axis titles
)
# Save it
ggsave(
filename = "blank_congress_map21.jpeg",
plot = blank_congress_map21,
path = "/Users/alexander/Documents/boyco-benites/figs/national",
width = 10,
height = 12,
dpi = 300
)
party_colours <- c(
"1" = "#0087DC",
"2" = "#E4003B",
"3"  = "#FAA61A"
)
party_map <- ggplot(map) +
geom_sf(aes(fill = cluster), colour = "gray", size = 0.05) +
scale_fill_manual(
values = party_colours,
name = "Cluster"
) +
labs(
title = "Clusters of Blank Votes (Congress)",
caption = "Source: ONPE"
) +
theme_minimal() +
theme(
legend.position = "right",
panel.grid = element_blank(),
axis.text = element_blank(),
axis.title = element_blank()
)
# Save it
ggsave(
filename = "cluster_map_congress.jpeg",
plot = party_map,
path = "/Users/alexander/Documents/boyco-benites/figs/national",
width = 10,
height = 12,
dpi = 300
)
g1pb <- dataPresidential %>% select(1,10,13) %>%
mutate(YEAR = as.character(YEAR)) %>%
pivot_wider(
names_from = YEAR,
values_from = FreqBLANCOS,
names_prefix = "blank_"
) %>% mutate(UBIGEO = ifelse(nchar(UBIGEO) == 5, str_pad(UBIGEO, 6, pad = "0"), UBIGEO))
# Optionally remove UBIGEO for plotting
g1pb_plot <- g1pb %>% slice(1:1874) %>%
tibble::column_to_rownames("UBIGEO") %>%
filter(if_all(everything(), ~ is.finite(.))) %>% select(5,4,3,2,1)
# Custom function to show correlation coefficients
my_cor <- function(data, mapping, method = "pearson", digits = 2, ...) {
x <- eval_data_col(data, mapping$x)
y <- eval_data_col(data, mapping$y)
corr <- cor(x, y, method = method, use = "complete.obs")
ggally_text(
label = format(corr, digits = digits),
mapping = aes(),
...
) +
theme_void()
}
# Create the plot
ggpairs(
data = g1pb_plot,
lower = list(continuous = wrap("points", alpha = 0.5, size = 1)),
diag = list(continuous = wrap("barDiag", bins = 20)),
upper = list(continuous = wrap(my_cor, method = "pearson"))
)
# ggsave("presidential_blank.jpeg", dpi = 300, width = 8.5, height = 7, units = "in")
# Step 2: Compute distance matrix (Euclidean by default)
dist_matrix <- dist(g1pb_plot, method = "euclidean")
# Step 3: Hierarchical clustering (Ward's method = minimizes within-cluster variance)
hc <- hclust(dist_matrix, method = "ward.D2")
# PCA on the scaled data
pca_result <- prcomp(g1pb_plot)
# Visualise with PCA and colour by hierarchical cluster
fviz_pca_ind(pca_result,
geom.ind = "point",
col.ind = as.factor(cutree(hc, k = 3)),  # Cluster membership
palette = "jco",
addEllipses = TRUE,
legend.title = "Cluster",
title = "District Clusters Based on Blank Votes (PCA)")
# Step 1: Cut the dendrogram to get cluster membership (3 clusters in this example)
cluster_membership <- cutree(hc, k = 3)
# Step 2: Add cluster assignment as a new column in the original dataset
clust_blank_presidential<- g1pb_plot
cclust_blank_presidential$cluster <- factor(cluster_membership)
# Step 1: Cut the dendrogram to get cluster membership (3 clusters in this example)
cluster_membership <- cutree(hc, k = 3)
# Step 2: Add cluster assignment as a new column in the original dataset
clust_blank_presidential<- g1pb_plot
clust_blank_presidential$cluster <- factor(cluster_membership)
# Ubi
clust_blank_presidential$UBIGEO <- row.names(clust_blank_presidential)
View(clust_blank_presidential)
set.seed(123)
kmeans_result <- kmeans(g1pb_plot, centers = 3, nstart = 25)
fviz_cluster(kmeans_result, data = g1pb_plot,
main = "K-means Clustering of Districts")
names(map)
p2021 <- merge(p2021, clust_blank_presidential, by = "UBIGEO", all.x = TRUE)
p2021 <- dataPresidential %>% select(1,10,13) %>%
mutate(UBIGEO = ifelse(nchar(UBIGEO) == 5, str_pad(UBIGEO, 6, pad = "0"), UBIGEO))
p2021 <- p2021[p2021$YEAR == "2021",]
#Merge
p2021 <- merge(p2021, ubi, by.x = "UBIGEO", by.y = "ubigeo_reniec", all.x = TRUE)
p2021 <- p2021[,c(4,2)]
p2021 <- merge(p2021, clust_blank_presidential, by = "UBIGEO", all.x = TRUE)
View(p2021)
p2021 <- dataPresidential %>% select(1,10,13) %>%
mutate(UBIGEO = ifelse(nchar(UBIGEO) == 5, str_pad(UBIGEO, 6, pad = "0"), UBIGEO))
p2021 <- p2021[p2021$YEAR == "2021",]
#Merge
p2021 <- merge(p2021, ubi, by.x = "UBIGEO", by.y = "ubigeo_reniec", all.x = TRUE)
p2021 <- dataPresidential %>% select(1,10,13) %>%
mutate(UBIGEO = ifelse(nchar(UBIGEO) == 5, str_pad(UBIGEO, 6, pad = "0"), UBIGEO))
p2021 <- p2021[p2021$YEAR == "2021",]
#Merge
p2021 <- merge(p2021, ubi, by.x = "UBIGEO", by.y = "ubigeo_reniec", all.x = TRUE)
p2021 <- merge(p2021, clust_blank_presidential, by = "UBIGEO", all.x = TRUE)
p2021 <- p2021[,c(4,10)]
p2021 <- dataPresidential %>% select(1,10,13) %>%
mutate(UBIGEO = ifelse(nchar(UBIGEO) == 5, str_pad(UBIGEO, 6, pad = "0"), UBIGEO))
p2021 <- p2021[p2021$YEAR == "2021",]
#Merge
p2021 <- merge(p2021, ubi, by.x = "UBIGEO", by.y = "ubigeo_reniec", all.x = TRUE)
p2021 <- merge(p2021, clust_blank_presidential, by = "UBIGEO", all.x = TRUE)
p2021 <- p2021[,c(2,4,10)]
p2021 %>%
group_by(cluster) %>%
summarise(avg_blancos = mean(FreqBLANCOS, na.rm = TRUE))
map <- dist21 %>% # Merge with shapefile
left_join(p2021, by = c("UBIGEO" = "ubigeo_inei"))
party_colours <- c(
"1" = "#0087DC",
"2" = "#FAA61A",
"3"  = "#E4003B"
)
party_map <- ggplot(map) +
geom_sf(aes(fill = cluster), colour = "gray", size = 0.05) +
scale_fill_manual(
values = party_colours,
name = "Cluster"
) +
labs(
title = "Clusters of Blank Votes (Presidential)",
caption = "Source: ONPE"
) +
theme_minimal() +
theme(
legend.position = "right",
panel.grid = element_blank(),
axis.text = element_blank(),
axis.title = element_blank()
)
# Save it
ggsave(
filename = "cluster_map_presidential.jpeg",
plot = party_map,
path = "/Users/alexander/Documents/boyco-benites/figs/national",
width = 10,
height = 12,
dpi = 300
)
library(sf)
# Read shapefiles
PER2002 <- st_read("/Users/alexander/Documents/boyco-benites/shp/2002/distritos.shp")
PER2005 <- st_read("/Users/alexander/Documents/boyco-benites/shp/2005/Distritos.shp")
names(PER2002)
# Find intersections
overlaps <- st_intersection(PER2002, PER2005)
library(sf)
# Read shapefiles
PER2002 <- st_read("/Users/alexander/Documents/boyco-benites/shp/2002/distritos.shp")
PER2005 <- st_read("/Users/alexander/Documents/boyco-benites/shp/2005/Distritos.shp")
names(PER2002)
names(PER2005)
head(PER2002)
library(sf)
library(dplyr)
# Read shapefiles
PER2002 <- st_read("/Users/alexander/Documents/boyco-benites/shp/2002/distritos.shp")
PER2005 <- st_read("/Users/alexander/Documents/boyco-benites/shp/2005/Distritos.shp")
names(PER2002)
head(PER2002)
head(PER2005)
#Rename UBIGEO columns properly
PER2002 <- PER2002 %>%
mutate(UBIGEO_2002 = CODIGO_DIS)
PER2005 <- PER2005 %>%
mutate(UBIGEO_2005 = Codigo_dis)
# (Optional) transform CRS to a common one if needed
PER2002 <- st_transform(PER2002, crs = 32718)  # or whatever CRS they use
PER2005 <- st_transform(PER2005, crs = 32718)
# Intersect shapefiles
overlaps_2005_2002 <- st_intersection(
PER2005 %>% select(UBIGEO_2005, NAME_2005 = NOMBDIST),
PER2002 %>% select(UBIGEO_2002, NAME_2002 = NOMB_DIST)
)
# Calculate area of overlap
overlaps_2005_2002 <- overlaps_2005_2002 %>%
mutate(overlap_area = st_area(geometry))
# Calculate total area for each 2002 district
area_2002 <- PER2002 %>%
mutate(total_area_2002 = st_area(geometry)) %>%
select(UBIGEO_2002, total_area_2002)
# Join total area
overlaps_2005_2002 <- overlaps_2005_2002 %>%
left_join(area_2002, by = "UBIGEO_2002")
library(sf)
library(dplyr)
# Read shapefiles
PER2002 <- st_read("/Users/alexander/Documents/boyco-benites/shp/2002/distritos.shp")
PER2005 <- st_read("/Users/alexander/Documents/boyco-benites/shp/2005/Distritos.shp")
# Fix invalid geometries if needed (important!)
PER2002 <- st_make_valid(PER2002)
PER2005 <- st_make_valid(PER2005)
# Rename UBIGEO columns properly
PER2002 <- PER2002 %>%
mutate(UBIGEO_2002 = CODIGO_DIS)
PER2005 <- PER2005 %>%
mutate(UBIGEO_2005 = Codigo_dis)
# Ensure same CRS
PER2002 <- st_transform(PER2002, crs = 32718)  # Replace if needed
PER2005 <- st_transform(PER2005, crs = 32718)
# Only select the fields you want to keep before intersection
PER2002_select <- PER2002 %>%
select(UBIGEO_2002, NAME_2002 = NOMB_DIST)
PER2005_select <- PER2005 %>%
select(UBIGEO_2005, NAME_2005 = NOMBDIST)
# Now do the intersection (spatial overlay)
overlaps_2005_2002 <- st_intersection(PER2005_select, PER2002_select)
install.packages("lwgeom")
library(sf)
library(dplyr)
library(lwgeom)
# Load shapefiles
PER2002 <- st_read("/Users/alexander/Documents/boyco-benites/shp/2002/distritos.shp")
PER2005 <- st_read("/Users/alexander/Documents/boyco-benites/shp/2005/Distritos.shp")
# Strong fix of invalid geometries
PER2002 <- lwgeom::st_make_valid(PER2002)
library(lwgeom)
# Strong fix of invalid geometries
PER2002 <- lwgeom::st_make_valid(PER2002)
library(sf)
library(dplyr)
library(lwgeom)
# Load shapefiles
PER2002 <- st_read("/Users/alexander/Documents/boyco-benites/shp/2002/distritos.shp")
PER2005 <- st_read("/Users/alexander/Documents/boyco-benites/shp/2005/Distritos.shp")
# Strong fix of invalid geometries
PER2002 <- st_make_valid(PER2002)
PER2005 <- st_make_valid(PER2005)
# Create UBIGEO columns
PER2002 <- PER2002 %>%
mutate(UBIGEO_2002 = CODIGO_DIS)
PER2005 <- PER2005 %>%
mutate(UBIGEO_2005 = Codigo_dis)
# Ensure same CRS
PER2002 <- st_transform(PER2002, crs = 32718)  # use your CRS
PER2005 <- st_transform(PER2005, crs = 32718)
# Select only needed columns
PER2002_select <- PER2002 %>%
select(UBIGEO_2002, NAME_2002 = NOMB_DIST)
PER2005_select <- PER2005 %>%
select(UBIGEO_2005, NAME_2005 = NOMBDIST)
# INTERSECTION with valid geometries
overlaps_2005_2002 <- st_intersection(PER2005_select, PER2002_select)
library(sf)
library(dplyr)
# Load shapefiles
PER2002 <- st_read("/Users/alexander/Documents/boyco-benites/shp/2002/distritos.shp")
PER2005 <- st_read("/Users/alexander/Documents/boyco-benites/shp/2005/Distritos.shp")
# Force repair geometries: explode to polygons + buffer(0)
PER2002 <- PER2002 %>%
st_cast("POLYGON") %>%   # decompose multipolygons
st_buffer(0)             # buffer(0) = safe repair
PER2005 <- PER2005 %>%
st_cast("POLYGON") %>%
st_buffer(0)
