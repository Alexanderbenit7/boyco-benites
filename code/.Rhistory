upper = list(continuous = wrap("density", alpha = 0.4))
)
# Force the legend to show up
p <- p + theme(legend.position = "right")
# Print
print(p)
# Now plot only the numeric columns, but colour by 'type'
p <- ggpairs(
data = g1p,
columns = 1:5,  # only the year columns
mapping = aes(color = type),
lower = list(continuous = wrap("points", alpha = 0.6, size = 1)),
diag = list(continuous = wrap("densityDiag", alpha = 0.4)),
upper = list(continuous = wrap("density", alpha = 0.4))
)
# Force the legend to show up
p <- p + theme(legend.position = "right")
# Print
print(p)
View(g1pn)
View(g1p)
library(patchwork)
# Now plot only the numeric columns, but colour by 'type'
p <- ggpairs(
data = g1p,
columns = 1:5,  # only the year columns
mapping = aes(color = type),
lower = list(continuous = wrap("points", alpha = 0.6, size = 1)),
diag = list(continuous = wrap("densityDiag", alpha = 0.4)),
upper = list(continuous = wrap("density", alpha = 0.4))
)
# Extract a legend from a separate ggplot
legend_plot <- ggplot(g1p, aes(x = `2001`, y = `2006`, color = type)) +
geom_point() +
theme(legend.position = "right")
legend <- patchwork::wrap_elements(get_legend(legend_plot))
# Make sure 'type' is factor
g1p$type <- as.factor(g1p$type)
# Data prep
g1p_plot_data <- g1p %>%
select(type, `2001`, `2006`, `2011`, `2016`, `2021`) %>%
filter(if_all(everything(), is.finite))
# Make ggpairs plot WITHOUT showing legend yet
pairplot <- ggpairs(
data = g1p_plot_data,
columns = 2:6,  # only numeric columns
mapping = aes(color = type),
lower = list(continuous = wrap("points", alpha = 0.6, size = 1)),
diag = list(continuous = wrap("densityDiag", alpha = 0.4)),
upper = list(continuous = wrap("density", alpha = 0.4))
)
# Extract a legend from a separate ggplot
legend_plot <- ggplot(g1p_plot_data, aes(x = `2001`, y = `2006`, color = type)) +
geom_point() +
theme(legend.position = "right")
legend <- patchwork::wrap_elements(get_legend(legend_plot))
library(cowplot)
install.packages("cowplot")
library(cowplot)
# Make sure 'type' is factor
g1p$type <- as.factor(g1p$type)
# Data prep
g1p_plot_data <- g1p %>%
select(type, `2001`, `2006`, `2011`, `2016`, `2021`) %>%
filter(if_all(everything(), is.finite))
# Make ggpairs plot WITHOUT showing legend yet
pairplot <- ggpairs(
data = g1p_plot_data,
columns = 2:6,  # only numeric columns
mapping = aes(color = type),
lower = list(continuous = wrap("points", alpha = 0.6, size = 1)),
diag = list(continuous = wrap("densityDiag", alpha = 0.4)),
upper = list(continuous = wrap("density", alpha = 0.4))
)
# Extract a legend from a separate ggplot
legend_plot <- ggplot(g1p_plot_data, aes(x = `2001`, y = `2006`, color = type)) +
geom_point() +
theme(legend.position = "right")
legend <- patchwork::wrap_elements(get_legend(legend_plot))
# Combine the pairplot and the legend
final_plot <- pairplot + legend + plot_layout(widths = c(5, 1))
View(g1pb)
View(g1p)
View(g1p)
# Ensure 'type' is a factor
g1p$type <- as.factor(g1p$type)
# Select the relevant columns
g1p_plot_data <- g1p %>%
select(type, `2001`, `2006`, `2011`, `2016`, `2021`) %>%
filter(if_all(everything(), is.finite))
# Create the ggpairs matrix (no legend)
pairplot <- ggpairs(
data = g1p_plot_data,
columns = 2:6,
mapping = aes(color = type),
lower = list(continuous = wrap("points", alpha = 0.6, size = 1)),
diag = list(continuous = wrap("densityDiag", alpha = 0.4)),
upper = list(continuous = wrap("density", alpha = 0.4))
)
# Create a dummy plot to extract the legend
legend_plot <- ggplot(g1p_plot_data, aes(x = `2001`, y = `2006`, color = type)) +
geom_point() +
theme_minimal() +
theme(legend.position = "right")
# Extract the legend
legend <- cowplot::get_legend(legend_plot)
# Convert pairplot to a grob
pair_grob <- ggplotGrob(pairplot)
View(g1pn)
View(g1pn_plot)
# Custom function for correlation text
my_cor <- function(data, mapping, method = "pearson", digits = 2, ...) {
x <- eval_data_col(data, mapping$x)
y <- eval_data_col(data, mapping$y)
corr <- cor(x, y, method = method, use = "complete.obs")
ggally_text(
label = format(corr, digits = digits),
mapping = aes(),
...
) +
theme_void()
}
# Create the ggpairs object
pair_plot <- ggpairs(
data = g1pn_plot,
lower = list(continuous = wrap("points", alpha = 0.5, size = 1)),
diag = list(continuous = wrap("barDiag", bins = 20)),
upper = list(continuous = wrap(my_cor, method = "pearson"))
)
# Combine with a title
title <- cowplot::ggdraw() +
cowplot::draw_label(
"Correlation matrix – Null votes in Presidential Elections",
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(plot.margin = margin(0, 0, 10, 7))
# Combine title and plot
cowplot::plot_grid(title, pair_plot, ncol = 1, rel_heights = c(0.07, 1))
# Custom function to show correlation coefficients
my_cor <- function(data, mapping, method = "pearson", digits = 2, ...) {
x <- eval_data_col(data, mapping$x)
y <- eval_data_col(data, mapping$y)
corr <- cor(x, y, method = method, use = "complete.obs")
ggally_text(
label = format(corr, digits = digits),
mapping = aes(),
...
) +
theme_void()
}
# Create the plot
ggpairs(
data = g1pn_plot,
lower = list(continuous = wrap("points", alpha = 0.5, size = 1)),
diag = list(continuous = wrap("barDiag", bins = 20)),
upper = list(continuous = wrap(my_cor, method = "pearson"))
)
library(rio)
library(dplyr)
library(stringr)
library(tidyr)
library(ggplot2)
library(GGally)
library(ggcorrplot)
library(corrplot)
library(patchwork)
library(cowplot)
# Load data
## Presidential Elections
years <- c(2021, 2016, 2011, 2006, 2001)
file_names <- paste0("/Users/alexander/Documents/boyco-benites/data/processed/presidenciales-"
,years, ".csv")
dataPresidential <- bind_rows(
lapply(seq_along(file_names), function(i) {
rio::import(file_names[i])
})
)
## Congress Elections
file_names <- paste0("/Users/alexander/Documents/boyco-benites/data/processed/congresales-",
years, ".csv")
dataCongress <- bind_rows(
lapply(seq_along(file_names), function(i) {
rio::import(file_names[i])
})
)
# Fix UBIGEOs
allData <- bind_rows(dataPresidential, dataCongress) %>%
mutate(UBIGEO = ifelse(nchar(UBIGEO) == 5, str_pad(UBIGEO, 6, pad = "0"), UBIGEO))
regionales <- import("/Users/alexander/Documents/boyco-benites/data/processed/sub/regionalesALL.csv")
provinciales <- import("/Users/alexander/Documents/boyco-benites/data/processed/sub/provincialesALL.csv")
distritales <- import("/Users/alexander/Documents/boyco-benites/data/processed/sub/distritalesALL.csv")
subData <- rbind(distritales, provinciales)
subData <- rbind(subData, regionales)
dataTrends <- allData %>%
group_by(TYPE, YEAR) %>%
summarise(TOTAL_VOTOS = sum(TOTAL_VOTOS, na.rm = TRUE),
ELECTORES_HAB = sum(ELECTORES_HAB, na.rm = TRUE),
V_NULOS = sum(V_NULOS, na.rm = TRUE),
V_BLANCOS = sum(V_BLANCOS, na.rm = TRUE))
dataTrends$AUSENTISMO = 1 - round(dataTrends$TOTAL_VOTOS / dataTrends$ELECTORES_HAB,2)
dataTrends$FreqBLANCOS = round(dataTrends$V_BLANCOS / dataTrends$TOTAL_VOTOS,2)
dataTrends$FreqNULOS = round(dataTrends$V_NULOS / dataTrends$TOTAL_VOTOS, 2)
dataTrends$FreqINVALIDOS = dataTrends$FreqBLANCOS + dataTrends$FreqNULOS
dataTrends <- dataTrends %>%
select(1, 2, 8:9) %>%
setNames(c("TYPE", "YEAR", "Votos Blancos", "Votos Nulos")) %>%
pivot_longer(cols = c("Votos Blancos", "Votos Nulos"),
names_to = "vote_type",
values_to = "percentage")
dataTrends <- dataTrends %>%
mutate(TYPE = case_when(
TYPE == "CONGRESAL" ~ "Elección Congresal",
TYPE == "PRESIDENCIAL" ~ "Elección Presidencial",
TRUE ~ TYPE  # keep other values as they are
))
dataTrends$YEAR = as.character(dataTrends$YEAR)
ggplot(dataTrends, aes(x = YEAR, y = percentage,
colour = vote_type,
linetype = TYPE,
group = interaction(TYPE, vote_type))) +
geom_line(size = 1) +
geom_point(size = 1) +
geom_text(aes(label = percentage),
vjust = -0.8, size = 3, show.legend = FALSE) +
labs(title = "Blank and Votes by Election Type",
x = " ",
y = " ",
colour = " ",
linetype = " ") +
theme_minimal() +
theme(
legend.position = "bottom",
legend.box = "vertical",
legend.spacing = unit(0, "lines")
) +
guides(
colour = guide_legend(order = 1),
linetype = guide_legend(order = 2)
)
# ggsave("trend.png", dpi = 300, width = 8.5, height = 6, units = "in")
subDataTrends <- subData %>%
group_by(TYPE, YEAR) %>%
summarise(TOTAL_VOTOS = sum(TOTAL_VOTOS, na.rm = TRUE),
ELECTORES_HAB = sum(ELECTORES_HABILES, na.rm = TRUE),
V_NULOS = sum(VOTOS_NULOS, na.rm = TRUE),
V_BLANCOS = sum(VOTOS_BLANCOS, na.rm = TRUE))
subDataTrends$AUSENTISMO = 1 - round(subDataTrends$TOTAL_VOTOS / subDataTrends$ELECTORES_HAB,2)
subDataTrends$FreqBLANCOS = round(subDataTrends$V_BLANCOS / subDataTrends$TOTAL_VOTOS,2)
subDataTrends$FreqNULOS = round(subDataTrends$V_NULOS / subDataTrends$TOTAL_VOTOS, 2)
subDataTrends$FreqINVALIDOS = subDataTrends$FreqBLANCOS + subDataTrends$FreqNULOS
subDataTrends <- subDataTrends %>%
select(1, 2, 8:9) %>%
setNames(c("TYPE", "YEAR", "Votos Blancos", "Votos Nulos")) %>%
pivot_longer(cols = c("Votos Blancos", "Votos Nulos"),
names_to = "vote_type",
values_to = "percentage")
subDataTrends <- subDataTrends %>%
mutate(TYPE = case_when(
TYPE == "REGIONALES" ~ "Gobierno Regional",
TYPE == "PROVINCIALES" ~ "Alcaldía Provincial",
TYPE == "DISTRITALES" ~ "Alcaldía Distrital",
TRUE ~ TYPE  # keep other values as they are
))
subDataTrends$YEAR = as.character(subDataTrends$YEAR)
subDataTrends1 <- subDataTrends[subDataTrends$TYPE == "Gobierno Regional",]
ggplot(subDataTrends1, aes(x = YEAR, y = percentage,
colour = vote_type,
linetype = TYPE,
group = interaction(TYPE, vote_type))) +
geom_line(size = 1) +
geom_point(size = 1) +
geom_text(aes(label = percentage),
vjust = -0.8, size = 3, show.legend = FALSE) +
labs(title = "Blank and Votes by Election Type",
x = " ",
y = " ",
colour = " ",
linetype = " ") +
theme_minimal() +
theme(
legend.position = "bottom",
legend.box = "vertical",
legend.spacing = unit(0, "lines")
) +
guides(
colour = guide_legend(order = 1),
linetype = guide_legend(order = 2)
)
ggsave("trendGR.jpeg", dpi = 300, width = 8.5, height = 6, units = "in")
subDataTrends <- subDataTrends[!subDataTrends$TYPE == "Gobierno Regional",]
ggplot(subDataTrends, aes(x = YEAR, y = percentage,
colour = vote_type,
linetype = TYPE,
group = interaction(TYPE, vote_type))) +
geom_line(size = 1) +
geom_point(size = 1) +
geom_text(aes(label = percentage),
vjust = -0.8, size = 3, show.legend = FALSE) +
labs(title = "Blank and Votes by Election Type",
x = " ",
y = " ",
colour = " ",
linetype = " ") +
theme_minimal() +
theme(
legend.position = "bottom",
legend.box = "vertical",
legend.spacing = unit(0, "lines")
) +
guides(
colour = guide_legend(order = 1),
linetype = guide_legend(order = 2)
)
ggsave("trendAL.jpeg", dpi = 300, width = 8.5, height = 6, units = "in")
g1cb <- dataCongress %>% select(1,10,13) %>%
mutate(YEAR = as.character(YEAR)) %>%
pivot_wider(
names_from = YEAR,
values_from = FreqBLANCOS,
names_prefix = "blank_"
) %>% mutate(UBIGEO = ifelse(nchar(UBIGEO) == 5, str_pad(UBIGEO, 6, pad = "0"), UBIGEO))
# Optionally remove UBIGEO for plotting
g1cb_plot <- g1cb %>% select(-UBIGEO) %>% slice(1:1874) %>%
filter(if_all(everything(), ~ is.finite(.))) %>% select(5,4,3,2,1)
# Custom function to show correlation coefficients
my_cor <- function(data, mapping, method = "pearson", digits = 2, ...) {
x <- eval_data_col(data, mapping$x)
y <- eval_data_col(data, mapping$y)
corr <- cor(x, y, method = method, use = "complete.obs")
ggally_text(
label = format(corr, digits = digits),
mapping = aes(),
...
) +
theme_void()
}
# Create the plot
ggpairs(
data = g1cb_plot,
lower = list(continuous = wrap("points", alpha = 0.5, size = 1)),
diag = list(continuous = wrap("barDiag", bins = 20)),
upper = list(continuous = wrap(my_cor, method = "pearson"))
)
g1cn <- dataCongress %>% select(1,11,13) %>%
mutate(YEAR = as.character(YEAR)) %>%
pivot_wider(
names_from = YEAR,
values_from = FreqNULOS,
names_prefix = "null_"
) %>% mutate(UBIGEO = ifelse(nchar(UBIGEO) == 5, str_pad(UBIGEO, 6, pad = "0"), UBIGEO))
# Optionally remove UBIGEO for plotting
g1cn_plot <- g1cn %>% select(-UBIGEO) %>% slice(1:1874) %>%
filter(if_all(everything(), ~ is.finite(.))) %>% select(5,4,3,2,1)
# Custom function to show correlation coefficients
my_cor <- function(data, mapping, method = "pearson", digits = 2, ...) {
x <- eval_data_col(data, mapping$x)
y <- eval_data_col(data, mapping$y)
corr <- cor(x, y, method = method, use = "complete.obs")
ggally_text(
label = format(corr, digits = digits),
mapping = aes(),
...
) +
theme_void()
}
# Create the plot
ggpairs(
data = g1cn_plot,
lower = list(continuous = wrap("points", alpha = 0.5, size = 1)),
diag = list(continuous = wrap("barDiag", bins = 20)),
upper = list(continuous = wrap(my_cor, method = "pearson"))
)
g1pb <- dataPresidential %>% select(1,10,13) %>%
mutate(YEAR = as.character(YEAR)) %>%
pivot_wider(
names_from = YEAR,
values_from = FreqBLANCOS,
names_prefix = "blank_"
) %>% mutate(UBIGEO = ifelse(nchar(UBIGEO) == 5, str_pad(UBIGEO, 6, pad = "0"), UBIGEO))
# Optionally remove UBIGEO for plotting
g1pb_plot <- g1pb %>% select(-UBIGEO) %>% slice(1:1874) %>%
filter(if_all(everything(), ~ is.finite(.))) %>% select(5,4,3,2,1)
# Custom function to show correlation coefficients
my_cor <- function(data, mapping, method = "pearson", digits = 2, ...) {
x <- eval_data_col(data, mapping$x)
y <- eval_data_col(data, mapping$y)
corr <- cor(x, y, method = method, use = "complete.obs")
ggally_text(
label = format(corr, digits = digits),
mapping = aes(),
...
) +
theme_void()
}
# Create the plot
ggpairs(
data = g1pb_plot,
lower = list(continuous = wrap("points", alpha = 0.5, size = 1)),
diag = list(continuous = wrap("barDiag", bins = 20)),
upper = list(continuous = wrap(my_cor, method = "pearson"))
)
g1pn <- dataPresidential %>% select(1,11,13) %>%
mutate(YEAR = as.character(YEAR)) %>%
pivot_wider(
names_from = YEAR,
values_from = FreqNULOS,
names_prefix = "null_"
) %>% mutate(UBIGEO = ifelse(nchar(UBIGEO) == 5, str_pad(UBIGEO, 6, pad = "0"), UBIGEO))
# Optionally remove UBIGEO for plotting
g1pn_plot <- g1pn %>% select(-UBIGEO) %>% slice(1:1874) %>%
filter(if_all(everything(), ~ is.finite(.))) %>% select(5,4,3,2,1)
# Custom function to show correlation coefficients
my_cor <- function(data, mapping, method = "pearson", digits = 2, ...) {
x <- eval_data_col(data, mapping$x)
y <- eval_data_col(data, mapping$y)
corr <- cor(x, y, method = method, use = "complete.obs")
ggally_text(
label = format(corr, digits = digits),
mapping = aes(),
...
) +
theme_void()
}
# Create the plot
ggpairs(
data = g1pn_plot,
lower = list(continuous = wrap("points", alpha = 0.5, size = 1)),
diag = list(continuous = wrap("barDiag", bins = 20)),
upper = list(continuous = wrap(my_cor, method = "pearson"))
)
# Custom function to show correlation coefficients
my_cor <- function(data, mapping, method = "pearson", digits = 2, ...) {
x <- eval_data_col(data, mapping$x)
y <- eval_data_col(data, mapping$y)
corr <- cor(x, y, method = method, use = "complete.obs")
ggally_text(
label = format(corr, digits = digits),
mapping = aes(),
...
) +
theme_void()
}
# Create the plot
ggpairs(
data = g1cb_plot,
lower = list(continuous = wrap("points", alpha = 0.5, size = 1)),
diag = list(continuous = wrap("barDiag", bins = 20)),
upper = list(continuous = wrap(my_cor, method = "pearson"))
)
ggsave("congress_blank.jpeg", dpi = 300, width = 8.5, height = 7, units = "in")
# Custom function to show correlation coefficients
my_cor <- function(data, mapping, method = "pearson", digits = 2, ...) {
x <- eval_data_col(data, mapping$x)
y <- eval_data_col(data, mapping$y)
corr <- cor(x, y, method = method, use = "complete.obs")
ggally_text(
label = format(corr, digits = digits),
mapping = aes(),
...
) +
theme_void()
}
# Create the plot
ggpairs(
data = g1cn_plot,
lower = list(continuous = wrap("points", alpha = 0.5, size = 1)),
diag = list(continuous = wrap("barDiag", bins = 20)),
upper = list(continuous = wrap(my_cor, method = "pearson"))
)
ggsave("congress_null.jpeg", dpi = 300, width = 8.5, height = 7, units = "in")
# Custom function to show correlation coefficients
my_cor <- function(data, mapping, method = "pearson", digits = 2, ...) {
x <- eval_data_col(data, mapping$x)
y <- eval_data_col(data, mapping$y)
corr <- cor(x, y, method = method, use = "complete.obs")
ggally_text(
label = format(corr, digits = digits),
mapping = aes(),
...
) +
theme_void()
}
# Create the plot
ggpairs(
data = g1pb_plot,
lower = list(continuous = wrap("points", alpha = 0.5, size = 1)),
diag = list(continuous = wrap("barDiag", bins = 20)),
upper = list(continuous = wrap(my_cor, method = "pearson"))
)
ggsave("presidential_blank.jpeg", dpi = 300, width = 8.5, height = 7, units = "in")
# Custom function to show correlation coefficients
my_cor <- function(data, mapping, method = "pearson", digits = 2, ...) {
x <- eval_data_col(data, mapping$x)
y <- eval_data_col(data, mapping$y)
corr <- cor(x, y, method = method, use = "complete.obs")
ggally_text(
label = format(corr, digits = digits),
mapping = aes(),
...
) +
theme_void()
}
# Create the plot
ggpairs(
data = g1pn_plot,
lower = list(continuous = wrap("points", alpha = 0.5, size = 1)),
diag = list(continuous = wrap("barDiag", bins = 20)),
upper = list(continuous = wrap(my_cor, method = "pearson"))
)
ggsave("presidential_null.jpeg", dpi = 300, width = 8.5, height = 7, units = "in")
